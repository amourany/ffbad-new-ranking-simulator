/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SimulateTournamentRouteImport } from './routes/simulate-tournament'
import { Route as SimulateRouteImport } from './routes/simulate'
import { Route as ConvertRouteImport } from './routes/convert'

const IndexLazyRouteImport = createFileRoute('/')()

const SimulateTournamentRoute = SimulateTournamentRouteImport.update({
  id: '/simulate-tournament',
  path: '/simulate-tournament',
  getParentRoute: () => rootRouteImport,
} as any)
const SimulateRoute = SimulateRouteImport.update({
  id: '/simulate',
  path: '/simulate',
  getParentRoute: () => rootRouteImport,
} as any)
const ConvertRoute = ConvertRouteImport.update({
  id: '/convert',
  path: '/convert',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/convert': typeof ConvertRoute
  '/simulate': typeof SimulateRoute
  '/simulate-tournament': typeof SimulateTournamentRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/convert': typeof ConvertRoute
  '/simulate': typeof SimulateRoute
  '/simulate-tournament': typeof SimulateTournamentRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/convert': typeof ConvertRoute
  '/simulate': typeof SimulateRoute
  '/simulate-tournament': typeof SimulateTournamentRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/convert' | '/simulate' | '/simulate-tournament'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/convert' | '/simulate' | '/simulate-tournament'
  id: '__root__' | '/' | '/convert' | '/simulate' | '/simulate-tournament'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ConvertRoute: typeof ConvertRoute
  SimulateRoute: typeof SimulateRoute
  SimulateTournamentRoute: typeof SimulateTournamentRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/simulate-tournament': {
      id: '/simulate-tournament'
      path: '/simulate-tournament'
      fullPath: '/simulate-tournament'
      preLoaderRoute: typeof SimulateTournamentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/simulate': {
      id: '/simulate'
      path: '/simulate'
      fullPath: '/simulate'
      preLoaderRoute: typeof SimulateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/convert': {
      id: '/convert'
      path: '/convert'
      fullPath: '/convert'
      preLoaderRoute: typeof ConvertRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ConvertRoute: ConvertRoute,
  SimulateRoute: SimulateRoute,
  SimulateTournamentRoute: SimulateTournamentRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
